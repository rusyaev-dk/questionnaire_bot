from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from tgbot.keyboards.qe_reply_kbs import main_menu_kb
from tgbot.misc.throttling_function import rate_limit

from tgbot.services.database import db_commands
from tgbot.misc.dependences import ADMIN_USERNAME


@rate_limit(2)
async def get_main_menu(message: types.Message, state: FSMContext):
    await db_commands.add_user(id=message.from_user.id, name=message.from_user.full_name)
    state_name = await state.get_state()
    if state_name:
        if "CreateQe" in state_name:
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        elif "PassQe" in state_name:
            await message.answer("‚ùå –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        else:
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    await state.reset_data()
    await state.finish()


@rate_limit(2)
async def cancel_action(message: types.Message, state: FSMContext):
    state_name = await state.get_state()
    if state_name:
        if "CreateQe" in state_name:
            await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        elif "PassQe" in state_name:
            await message.answer("‚ùå –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        else:
            await message.answer("‚Ü©Ô∏è –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    else:
        await message.answer("‚Ü©Ô∏è –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)

    await state.reset_data()
    await state.finish()


@rate_limit(2)
async def get_help(message: types.Message):
    await message.answer("üõ† –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞–∂–º–∏—Ç–µ <b>/restart</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. "
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: <b>{ADMIN_USERNAME}</b>")


@rate_limit(3)
async def get_bot_statistics(message: types.Message):
    total_users = await db_commands.count_users()
    total_qes = await db_commands.count_qes()
    await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                         f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b> —á–µ–ª.\n"
                         f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –æ–ø—Ä–æ—Å–æ–≤: <b>{total_qes}</b>\n")


def register_additional_commands(dp: Dispatcher):
    dp.register_message_handler(get_main_menu, commands=["menu"], state="*")
    dp.register_message_handler(cancel_action, commands=["cancel"], state="*")
    dp.register_message_handler(get_help, commands=["help"], state="*")

    dp.register_message_handler(get_bot_statistics, commands=["statistics"], is_admin=True, state="*")
