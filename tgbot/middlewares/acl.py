from aiogram import types, Dispatcher
from aiogram.dispatcher.handler import CancelHandler

from tgbot.keyboards.qe_reply_kbs import email_accept_kb
from tgbot.misc.states import UserEmail
from tgbot.infrastructure.database import db_commands
from aiogram.dispatcher.middlewares import BaseMiddleware


class ACLMiddleware(BaseMiddleware):
    async def setup_chat(self, data: dict, user: types.User, message: types.Message = None,
                         call: types.CallbackQuery = None):
        user_id = user.id
        registered = await db_commands.select_user(id=user_id)
        if registered is None:
            dispatcher = Dispatcher.get_current()
            state = dispatcher.current_state()
            state_name = await state.get_state()
            if state_name == "UserEmail:GetEmail":
                return

            text = (f"üîπ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name}! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å "
                    f"—Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø—Ä–æ—Å—ã. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –±–æ—Ç–∞ –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç "
                    f"—Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è.\n\nüìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∞–¥—Ä–µ—Å —Å–≤–æ–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã</b> –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π "
                    f"—Å–≤—è–∑–∏ —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏ –¥—Ä—É–≥–∏—Ö –æ–ø—Ä–æ—Å–æ–≤:")
            flag = 0

            if message:
                await message.answer(text=text, reply_markup=email_accept_kb)
                if message.get_args():
                    flag = 1
            elif call:
                await call.message.delete()
                await call.message.answer(text=text, reply_markup=email_accept_kb)

            await db_commands.add_user(id=user_id, name=user.full_name)
            await UserEmail.GetEmail.set()
            await state.update_data(flag=flag)
            raise CancelHandler()

    async def on_pre_process_message(self, message: types.Message, data: dict):
        await self.setup_chat(data, message.from_user, message=message)

    async def on_pre_process_callback_query(self, call: types.CallbackQuery, data: dict):
        await self.setup_chat(data, call.from_user, call=call)
