import random, string

from tgbot.services.database import db_commands
from tgbot.services.database.db_models import Questionnaire
from tgbot.services.dependences import ANSWER_LETTERS


def get_rand_id(length: int):
    """
    Generates random combination of symbols for questionnaire_id in database
    """

    symbols = string.ascii_lowercase + string.ascii_uppercase + string.digits
    return ''.join(random.choice(symbols) for i in range(length))


async def parse_questions_text(questionnaire: Questionnaire):
    """
    Parsing questions entered by user
    """

    questions_list = questionnaire.questions
    text = (f"üîç –í–∞—à –æ–ø—Ä–æ—Å:\n\n "
            f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{questionnaire.title}</b>\n\n")
    for i in range(len(questions_list)):
        text += f"{i + 1}-–π –≤–æ–ø—Ä–æ—Å : <b>{questions_list[i][1]}</b>\n"
    text += "\n\n–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å?"
    return text


async def parse_answers_text(answers: list):
    """
    Parsing answers entered by user
    """

    text = "üìÑ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for i in range(len(answers)):
        text += f"{i + 1}-–π –æ—Ç–≤–µ—Ç: <b>{answers[i]}</b>\n"
    text += "\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã?"
    return text


async def parse_answer_options(answer_options: list):
    """
    Parsing answer options for a given test
    """

    text = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n"
    for i in range(len(answer_options)):
        text += f"<b>{ANSWER_LETTERS[i]}:</b> {answer_options[i]}\n"
    text += "\n‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:"
    return text


async def created_qe_info(questionnaire: Questionnaire):
    """
    Parsing created by user questionnaire info with statistics etc.
    """

    questions_list = questionnaire.questions
    answer_options = questionnaire.answer_options
    closed_counter = 0

    text = f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{questionnaire.title}</b>\n\n"
    for i in range(len(questions_list)):
        text += f"‚Ä¢ {i + 1}-–π –≤–æ–ø—Ä–æ—Å: <b>{questions_list[i][1]}</b>\n"
        if questions_list[i][0] == "closed":
            for j in range(len(answer_options[i])):
                text += f"<b>{ANSWER_LETTERS[j]}:</b> {answer_options[i][closed_counter]}\n"
            closed_counter += 1
            text += "\n"

    if questionnaire.passed_by == 0:
        pass_percent = 0
    else:
        pass_percent = questionnaire.started_by / questionnaire.passed_by * 100

    stat_text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                 f"‚Ä¢ –ù–∞—á–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å: <b>{questionnaire.started_by}</b> —á–µ–ª.\n"
                 f"‚Ä¢ –ü—Ä–æ—à–ª–∏: <b>{questionnaire.passed_by}</b> —á–µ–ª.\n"
                 f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: <b>{pass_percent}%</b>\n"
                 f"‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{questionnaire.created_at}</b>")
    # text += stat_text
    return text, stat_text


async def passed_qe_info(respondent_id: int, quest_id: str, markdown: bool):
    """
    Parsing passed by user questionnaire info with statistics etc.
    """

    questionnaire = await db_commands.select_questionnaire(quest_id=quest_id)
    questions_list = questionnaire.questions
    qe_answers = await db_commands.select_qe_answers(respondent_id=respondent_id, quest_id=quest_id)
    answers_list = qe_answers.answers
    answer_options = questionnaire.answer_options
    closed_counter = 0

    if markdown:
        text = f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: **{qe_answers.title}**\n\n"
        for i in range(len(questions_list)):
            text += f"{i + 1}-–π –≤–æ–ø—Ä–æ—Å: **{questions_list[i][1]}**\n"
            if questions_list[i][0] == "closed":
                for j in range(len(answer_options[i])):
                    text += f"**{ANSWER_LETTERS[j]}:** {answer_options[i][closed_counter]}\n"
                closed_counter += 1
            text += f"–û—Ç–≤–µ—Ç: **{answers_list[i]}**\n"
        text += f"\n–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: **{qe_answers.created_at}**"
    else:
        text = f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{qe_answers.title}</b>\n\n"

        for i in range(len(questions_list)):
            text += f"{i + 1}-–π –≤–æ–ø—Ä–æ—Å: <b>{questions_list[i][1]}</b>\n"

            if questions_list[i][0] == "closed":
                for j in range(len(answer_options[i])):
                    text += f"<b>{ANSWER_LETTERS[j]}:</b> {answer_options[closed_counter][j]}\n"
                closed_counter += 1

            text += f"–û—Ç–≤–µ—Ç: <b>{answers_list[i]}</b>\n\n"
        text += f"–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: <b>{qe_answers.created_at}</b>"
    return text
