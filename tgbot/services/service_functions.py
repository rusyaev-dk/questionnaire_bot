import random, string

from tgbot.services.database import db_commands


def get_rand_id(length):
    letters = string.ascii_lowercase + string.ascii_uppercase
    digits = string.digits
    symbols = letters + digits
    return ''.join(random.choice(symbols) for i in range(length))


async def parse_questions_text(questionnaire):
    questions_list = questionnaire.questions
    text = "üîç –í–∞—à –æ–ø—Ä–æ—Å:\n\n" + f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{questionnaire.title}</b>\n\n" + "\n".join(
        f"–í–æ–ø—Ä–æ—Å {i + 1}: <b>{questions_list[i]}</b>" for i in range(0, len(questions_list))
    ) + "\n\n–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å?"
    return text


async def parse_answers_text(qe_text_answers):
    answers_list = list(qe_text_answers.answers)
    text = "‚úèÔ∏è –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n" + "\n".join(f"–û—Ç–≤–µ—Ç {i + 1}: <b>{answers_list[i]}</b>"
                                        for i in range(0, len(answers_list)))
    return text


async def get_created_questionnaire_info(questionnaire):
    questions_list = list(questionnaire.questions)
    text = f"üîç –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{questionnaire.title}</b>\n\n" + "\n".join(f"–í–æ–ø—Ä–æ—Å {i + 1}: <b>{questions_list[i]}</b>"
                                                                         for i in range(0, len(questions_list)))
    try:
        pass_percent = questionnaire.started_by / questionnaire.passed_by * 100
    except ZeroDivisionError:
        pass_percent = 0
        pass
    stat_text = (f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                 f"‚Ä¢ –ù–∞—á–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å: <b>{questionnaire.started_by}</b> —á–µ–ª.\n"
                 f"‚Ä¢ –ü—Ä–æ—à–ª–∏: <b>{questionnaire.passed_by}</b> —á–µ–ª.\n"
                 f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: <b>{pass_percent}%</b>\n"
                 f"‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{questionnaire.created_at}</b>")
    text += stat_text
    return text


async def get_passed_questionnaire_info(respondent_id: int, quest_id: str, markdown: bool):
    questionnaire = await db_commands.select_questionnaire(quest_id=quest_id)
    questions_list = list(questionnaire.questions)
    qe_text_answers = await db_commands.select_qe_text_answers(respondent_id=respondent_id, quest_id=quest_id)
    answers_list = list(qe_text_answers.answers)

    if markdown:
        text = f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: **{qe_text_answers.title}**\n\n" + "\n".join(
            f"–í–æ–ø—Ä–æ—Å {i + 1}: **{questions_list[i]}**\n"
            f"–û—Ç–≤–µ—Ç: **{answers_list[i]}**\n"
            for i in range(0, len(questions_list)))
        text += f"\n–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: **{qe_text_answers.created_at}**"
    else:
        text = f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{qe_text_answers.title}</b>\n\n" + "\n".join(f"–í–æ–ø—Ä–æ—Å {i + 1}: <b>{questions_list[i]}</b>\n"
                                                                             f"–û—Ç–≤–µ—Ç: <b>{answers_list[i]}</b>\n"
                                                                             for i in range(0, len(questions_list)))
        text += f"\n–î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: <b>{qe_text_answers.created_at}</b>"
    return text
